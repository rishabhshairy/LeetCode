class Solution {
 public int minMalwareSpread(int[][] graph, int[] initial) {
        int n = graph.length;
        DisjointSet ds = new DisjointSet(n);
        int[] malwareCount = new int[n];

        // if its malware make it 1 else 0

        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                if (graph[i][j] == 1) {
                    ds.union(i, j);
                }
            }
        }

        for (int malware : initial) {
            malwareCount[ds.findUltParent(malware)]++;
        }

        System.out.println(ds.parents);
        System.out.println(ds.size);
        Arrays.sort(initial);
        int ans = initial[0];
        int maxSize = 0;

        for (int infected : initial) {
            int id = ds.findUltParent(infected);
            if (malwareCount[id] == 1 && ds.size.get(id) > maxSize) {
                maxSize = ds.size.get(id);
                ans = infected;
            }
        }

        return ans;
    }

    static class DisjointSet {
        List<Integer> parents = new ArrayList<>();
        List<Integer> size = new ArrayList<>();

        public DisjointSet(int n) {
            for (int i = 0; i <= n; i++) {
                parents.add(i);
                size.add(1);
            }
        }

        int findUltParent(int node) {
            if (parents.get(node) == node) {
                return node;
            }
            int ultParent = findUltParent(parents.get(node));
            parents.set(node, ultParent);
            return parents.get(node);
        }

        void union(int u, int v) {
            int ultParU = findUltParent(u);
            int ultParV = findUltParent(v);

            if (ultParU == ultParV) {
                return;
            }

            if (size.get(ultParU) < size.get(ultParV)) {
                parents.set(ultParU, ultParV);
                int newSize = size.get(ultParU) + size.get(ultParV);
                size.set(ultParV, newSize);
            } else {
                 parents.set(ultParV, ultParU);
                int newSize = size.get(ultParU) + size.get(ultParV);
                size.set(ultParU, newSize);
            }
        }
    }
}
